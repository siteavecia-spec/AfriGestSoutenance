const mongoose = require('mongoose');
const User = require('../models/User');
const Company = require('../models/Company');
require('dotenv').config();

const createRealSuperAdmin = async () => {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI, {
      dbName: process.env.MONGODB_DBNAME || 'afrigest'
    });
    console.log('‚úÖ Connect√© √† MongoDB');

    // V√©rifier si un super admin existe d√©j√†
    const existingSuperAdmin = await User.findOne({ role: 'super_admin' });
    if (existingSuperAdmin) {
      console.log('‚ö†Ô∏è  Un super admin existe d√©j√†:', existingSuperAdmin.email);
      console.log('üîÑ Mise √† jour des permissions...');
      
      // Mettre √† jour les permissions (concepteur/cr√©ateur uniquement)
      existingSuperAdmin.permissions = {
        canManageSystem: true,
        canManageCompanies: true,
        canManageSuperAdmins: true,
        canViewGlobalReports: true,
        // Pas de gestion op√©rationnelle directe
        canManageUsers: false,
        canViewAccounting: false,
        canManageInventory: false,
        canProcessSales: false,
        canViewReports: false
      };
      
      await existingSuperAdmin.save();
      console.log('‚úÖ Permissions du super admin mises √† jour !');
      console.log('üìß Email:', existingSuperAdmin.email);
      console.log('üîë Mot de passe: admin123');
      process.exit(0);
    }

    // Cr√©er le vrai super admin (concepteur/cr√©ateur)
    const superAdmin = new User({
      firstName: 'Super',
      lastName: 'Admin',
      email: 'admin@afrigest.com',
      password: 'admin123', // Mot de passe par d√©faut
      role: 'super_admin',
      isActive: true,
      isEmailVerified: true,
      permissions: {
        // Permissions de concepteur/cr√©ateur uniquement
        canManageSystem: true,        // Gestion du syst√®me global
        canManageCompanies: true,     // Cr√©er/supprimer des entreprises
        canManageSuperAdmins: true,   // Cr√©er d'autres super admins
        canViewGlobalReports: true,   // Rapports de toutes les entreprises
        // Pas de gestion op√©rationnelle directe
        canManageUsers: false,        // Pas de gestion directe des utilisateurs
        canViewAccounting: false,     // Pas d'acc√®s direct √† la comptabilit√©
        canManageInventory: false,    // Pas de gestion directe de l'inventaire
        canProcessSales: false,       // Pas de gestion directe des ventes
        canViewReports: false         // Pas d'acc√®s direct aux rapports op√©rationnels
      }
    });

    await superAdmin.save();
    console.log('‚úÖ Vrai Super Admin cr√©√© avec succ√®s !');
    console.log('üìß Email:', superAdmin.email);
    console.log('üîë Mot de passe: admin123');
    console.log('üéØ R√¥le: Concepteur/Cr√©ateur');
    console.log('‚ö†Ô∏è  N\'oubliez pas de changer le mot de passe apr√®s la premi√®re connexion !');

    // Cr√©er une entreprise d'exemple pour les tests
    const exampleCompany = new Company({
      name: 'Entreprise d\'exemple',
      code: 'EXEMPLE',
      email: 'contact@exemple.com',
      phone: '+225 07 00 00 00 00',
      address: {
        street: '123 Rue de l\'exemple',
        city: 'Abidjan',
        state: 'Abidjan',
        zipCode: '00225',
        country: 'C√¥te d\'Ivoire'
      },
      status: 'active',
      createdBy: superAdmin._id
    });

    await exampleCompany.save();
    console.log('‚úÖ Entreprise d\'exemple cr√©√©e:', exampleCompany.name);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du super admin:', error);
    process.exit(1);
  }
};

createRealSuperAdmin();
